/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Clases.FabricaLogica;
import Clases.ILogica;
import Dominio.Dias;
import Dominio.Guia;
import Dominio.Habitat;
import Dominio.Horario;
import Dominio.Itinerario;
import Dominio.Recorrido;
import Dominio.ZonaDelParque;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jctri
 */
public class FrmItinerarios extends javax.swing.JFrame {

    ILogica logica;
    Itinerario it = new Itinerario();
    private DefaultListModel<ZonaDelParque> disponiblesListModelZonas = new DefaultListModel<>();
    private DefaultListModel<ZonaDelParque> seleccionadosListModelZonas = new DefaultListModel<>();

    public FrmItinerarios() {
        logica = FabricaLogica.crearInstancia();
        initComponents();
    }

    public FrmItinerarios(List<Guia> ListGuia, List<ZonaDelParque> ListZona) {
        logica = FabricaLogica.crearInstancia();
        initComponents();

        listaDisponiblesZonas.setModel(disponiblesListModelZonas);
        listaSeleccionadosZonas.setModel(seleccionadosListModelZonas);
        muestraDatosRecuperados(ListGuia, ListZona);
        this.desactivaCampos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtItinerarios = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDuracion = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtLongitud = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtMaximoVisitantes = new javax.swing.JTextField();
        txtLunes = new javax.swing.JTextField();
        cbMartes = new javax.swing.JCheckBox();
        txtMartes = new javax.swing.JTextField();
        cbMiercoles = new javax.swing.JCheckBox();
        txtMiercoles = new javax.swing.JTextField();
        cbViernes = new javax.swing.JCheckBox();
        cbSabado = new javax.swing.JCheckBox();
        cbDomingo = new javax.swing.JCheckBox();
        txtViernes = new javax.swing.JTextField();
        cbJu = new javax.swing.JCheckBox();
        txtJueves = new javax.swing.JTextField();
        txtSabado = new javax.swing.JTextField();
        txtDomingo = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cmbGuia = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDisponiblesZonas = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaSeleccionadosZonas = new javax.swing.JList<>();
        btnSeleccionar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        cbLunes = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText(">> Apartado registro <<");

        btnBuscar.setBackground(new java.awt.Color(153, 153, 153));
        btnBuscar.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Nombre Itinerario:");

        txtItinerarios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtItinerariosKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Duración recorrido:");

        txtDuracion.setEnabled(false);
        txtDuracion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDuracionKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Longitud:");

        txtLongitud.setEnabled(false);
        txtLongitud.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLongitudKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("Máximo número de visitantes:");

        txtMaximoVisitantes.setEnabled(false);
        txtMaximoVisitantes.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                txtMaximoVisitantesAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        txtMaximoVisitantes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMaximoVisitantesKeyTyped(evt);
            }
        });

        txtLunes.setEnabled(false);

        cbMartes.setBackground(new java.awt.Color(255, 255, 255));
        cbMartes.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        cbMartes.setText("Martes");
        cbMartes.setEnabled(false);
        cbMartes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMartesActionPerformed(evt);
            }
        });

        txtMartes.setEnabled(false);
        txtMartes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMartesActionPerformed(evt);
            }
        });

        cbMiercoles.setBackground(new java.awt.Color(255, 255, 255));
        cbMiercoles.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        cbMiercoles.setText("Miércoles");
        cbMiercoles.setEnabled(false);
        cbMiercoles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMiercolesActionPerformed(evt);
            }
        });

        txtMiercoles.setEnabled(false);

        cbViernes.setBackground(new java.awt.Color(255, 255, 255));
        cbViernes.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        cbViernes.setText("Viernes");
        cbViernes.setEnabled(false);
        cbViernes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbViernesActionPerformed(evt);
            }
        });

        cbSabado.setBackground(new java.awt.Color(255, 255, 255));
        cbSabado.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        cbSabado.setText("Sábado");
        cbSabado.setEnabled(false);
        cbSabado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSabadoActionPerformed(evt);
            }
        });

        cbDomingo.setBackground(new java.awt.Color(255, 255, 255));
        cbDomingo.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        cbDomingo.setText("Domingo");
        cbDomingo.setEnabled(false);
        cbDomingo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDomingoActionPerformed(evt);
            }
        });

        txtViernes.setEnabled(false);

        cbJu.setBackground(new java.awt.Color(255, 255, 255));
        cbJu.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        cbJu.setText("Jueves");
        cbJu.setEnabled(false);
        cbJu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbJuActionPerformed(evt);
            }
        });

        txtJueves.setEnabled(false);

        txtSabado.setEnabled(false);

        txtDomingo.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("Guias: ");

        cmbGuia.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setText("Zonas:");

        btnRegistrar.setBackground(new java.awt.Color(153, 153, 153));
        btnRegistrar.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.setEnabled(false);
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnRegresar.setBackground(new java.awt.Color(153, 153, 153));
        btnRegresar.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 153, 102));
        jPanel3.setPreferredSize(new java.awt.Dimension(416, 67));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Pantalla Itinerario");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(649, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(24, 24, 24))
        );

        jScrollPane1.setViewportView(listaDisponiblesZonas);

        jScrollPane2.setViewportView(listaSeleccionadosZonas);

        btnSeleccionar.setText("Seleccionar");
        btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Deseleccionar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        cbLunes.setBackground(new java.awt.Color(255, 255, 255));
        cbLunes.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        cbLunes.setText("Lunes");
        cbLunes.setEnabled(false);
        cbLunes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLunesActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jirafa.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 880, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(6, 6, 6)
                                .addComponent(txtItinerarios, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(btnBuscar))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(484, 484, 484)
                                .addComponent(jLabel7))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(424, 424, 424)
                                .addComponent(cmbGuia, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel3)
                                .addGap(234, 234, 234)
                                .addComponent(jLabel8))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(13, 13, 13)
                                        .addComponent(txtDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(97, 97, 97)
                                        .addComponent(txtLongitud, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(10, 10, 10)
                                        .addComponent(txtMaximoVisitantes, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(30, 30, 30)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(36, 36, 36)
                        .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(664, 664, 664)
                        .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(574, 574, 574)
                        .addComponent(jLabel1))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(410, 410, 410)
                .addComponent(btnSeleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(btnEliminar))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(cbLunes, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(txtLunes, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbViernes)
                .addGap(128, 128, 128)
                .addComponent(txtViernes, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(cbMartes, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(txtMartes, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbSabado, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128)
                .addComponent(txtSabado, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(cbMiercoles)
                .addGap(18, 18, 18)
                .addComponent(txtMiercoles, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbDomingo)
                .addGap(118, 118, 118)
                .addComponent(txtDomingo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(cbJu, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(txtJueves, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(txtItinerarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(btnBuscar)))
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7)
                        .addGap(5, 5, 5)
                        .addComponent(cmbGuia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel3))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(txtDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(txtLongitud, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(txtMaximoVisitantes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(btnRegistrar))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(270, 270, 270)
                        .addComponent(btnRegresar))
                    .addComponent(jLabel1))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSeleccionar)
                    .addComponent(btnEliminar))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbLunes)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(txtLunes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(cbViernes))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(txtViernes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbMartes)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(txtMartes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(cbSabado))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(txtSabado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbMiercoles)
                    .addComponent(cbDomingo)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMiercoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDomingo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbJu)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtJueves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        if (this.txtItinerarios.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Ingrese nombre de el Itinerario a verificar");
        } else {
            it = logica.verificaNombreItinerario(txtItinerarios.getText());
            System.out.println(it);
            if (it != null) {
                muestraDetallesItinerarios(it);
                this.desactivaCampos();
            } else {
                JOptionPane.showMessageDialog(this, "No existe el Itinerario, se abren campos");
                activaCajasVerificacion();
            }
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        FrmInicial fi = new FrmInicial();
        fi.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void txtMaximoVisitantesAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_txtMaximoVisitantesAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaximoVisitantesAncestorAdded

    private void txtMartesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMartesActionPerformed

    }//GEN-LAST:event_txtMartesActionPerformed

    private void cbMartesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMartesActionPerformed
        mostrarEspacioTexto();
    }//GEN-LAST:event_cbMartesActionPerformed

    private void cbMiercolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMiercolesActionPerformed
        mostrarEspacioTexto();
    }//GEN-LAST:event_cbMiercolesActionPerformed

    private void cbViernesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbViernesActionPerformed
        mostrarEspacioTexto();
    }//GEN-LAST:event_cbViernesActionPerformed

    private void cbSabadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSabadoActionPerformed
        mostrarEspacioTexto();
    }//GEN-LAST:event_cbSabadoActionPerformed

    private void cbDomingoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDomingoActionPerformed
        mostrarEspacioTexto();
    }//GEN-LAST:event_cbDomingoActionPerformed

    private void cbJuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbJuActionPerformed
        mostrarEspacioTexto();

    }//GEN-LAST:event_cbJuActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        if (verificaCamposLlenos()) {
            if (validarRecorridos()) {
                registrarItinerario();
            } else {
                JOptionPane.showMessageDialog(this, "Formato invalido en Horas HH:MM");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Hay campos vacios!");
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
        // TODO add your handling code here:
        int i = listaDisponiblesZonas.getSelectedIndex();
        if (i != -1) {
            seleccionadosListModelZonas.addElement(disponiblesListModelZonas.getElementAt(i));
            disponiblesListModelZonas.remove(i);
        }
    }//GEN-LAST:event_btnSeleccionarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int i = listaSeleccionadosZonas.getSelectedIndex();
        if (i != -1) {
            disponiblesListModelZonas.addElement(seleccionadosListModelZonas.getElementAt(i));
            seleccionadosListModelZonas.remove(i);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void cbLunesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLunesActionPerformed
        // TODO add your handling code here:
        mostrarEspacioTexto();
    }//GEN-LAST:event_cbLunesActionPerformed

    private void txtItinerariosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItinerariosKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isLetter(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_SPACE) {
            super.processKeyEvent(evt);
        } else {
            evt.consume();
        }
        txtItinerarios.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (txtItinerarios.getText().length() >= 20) {
                    e.consume();
                }
            }
        });
    }//GEN-LAST:event_txtItinerariosKeyTyped

    private void txtDuracionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDuracionKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        } else {
            String currentText = txtDuracion.getText();
            String newText = currentText + c;
            try {
                int number = Integer.parseInt(newText);
                if (number < 1 || number > 90) {
                    evt.consume();
                }
            } catch (NumberFormatException ex) {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtDuracionKeyTyped

    private void txtLongitudKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLongitudKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        } else {
            String currentText = txtLongitud.getText();
            String newText = currentText + c;
            try {
                int number = Integer.parseInt(newText);
                if (number < 1 || number > 1500) {
                    evt.consume();
                }
            } catch (NumberFormatException ex) {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtLongitudKeyTyped

    private void txtMaximoVisitantesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaximoVisitantesKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        } else {
            String currentText = txtMaximoVisitantes.getText();
            String newText = currentText + c;
            try {
                int number = Integer.parseInt(newText);
                if (number < 1 || number > 30) {
                    evt.consume();
                }
            } catch (NumberFormatException ex) {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtMaximoVisitantesKeyTyped

    public void muestraDatosRecuperados(List<Guia> ListGuia, List<ZonaDelParque> ListZona) {
        for (int i = 0; i < ListGuia.size(); i++) {
            System.out.println(i);
            cmbGuia.addItem(ListGuia.get(i));
        }

        for (int i = 0; i < ListZona.size(); i++) {
            disponiblesListModelZonas.addElement(ListZona.get(i));

        }
    }

    public void muestraDetallesItinerarios(Itinerario itinerario) {
        txtMaximoVisitantes.setText(String.valueOf(itinerario.getMaximoVisitante()));
        txtDuracion.setText(String.valueOf(itinerario.getDuracion()));
        txtLongitud.setText(String.valueOf(itinerario.getLongitud()));
        cmbGuia.setSelectedItem(itinerario.getRecorridos().get(0).getGuia());
        
        for (Recorrido r : itinerario.getRecorridos()) {
            if (r.getHorarios().getDia().equals(Dias.Lunes)) {
                txtLunes.setText(r.getHorarios().getHoraInicio());
            }
            if (r.getHorarios().getDia().equals(Dias.Martes)) {
                txtMartes.setText(r.getHorarios().getHoraInicio());
            }
            if (r.getHorarios().getDia().equals(Dias.Miercoles)) {
                txtMiercoles.setText(r.getHorarios().getHoraInicio());
            }
            if (r.getHorarios().getDia().equals(Dias.Jueves)) {
                txtJueves.setText(r.getHorarios().getHoraInicio());
            }
            if (r.getHorarios().getDia().equals(Dias.Viernes)) {
                txtViernes.setText(r.getHorarios().getHoraInicio());
            }
            if (r.getHorarios().getDia().equals(Dias.Sabado)) {
                txtSabado.setText(r.getHorarios().getHoraInicio());
            }
            if (r.getHorarios().getDia().equals(Dias.Domingo)) {
                txtDomingo.setText(r.getHorarios().getHoraInicio());
            }

        }
        
        for (ZonaDelParque c :itinerario.getZonas()) {
             for (int i = 0; i < disponiblesListModelZonas.size(); i++) {
                 if (disponiblesListModelZonas.get(i).equals(c)) {
                     seleccionadosListModelZonas.addElement(c);
                     disponiblesListModelZonas.remove(i);
                 }
             }
        }
    }

    public void muestraError() {
        JOptionPane.showMessageDialog(this, "Itinerario existente", "Mensaje error", JOptionPane.INFORMATION_MESSAGE);
    }

    public void muestraMensajeExitoso() {
        JOptionPane.showMessageDialog(this, "Itinerario Registrada", "Mensaje Exitoso", JOptionPane.INFORMATION_MESSAGE);
    }

    public void desactivaCampos() {
        txtDuracion.setEnabled(false);
        txtLongitud.setEnabled(false);
        txtMaximoVisitantes.setEnabled(false);
        listaDisponiblesZonas.setEnabled(false);
        listaSeleccionadosZonas.setEnabled(false);
        cmbGuia.setEnabled(false);
        cbLunes.setEnabled(false);
        cbMartes.setEnabled(false);
        cbMiercoles.setEnabled(false);
        cbJu.setEnabled(false);
        cbViernes.setEnabled(false);
        cbSabado.setEnabled(false);
        cbDomingo.setEnabled(false);
        btnRegistrar.setEnabled(false);
        btnSeleccionar.setEnabled(false);
        btnEliminar.setEnabled(false);
    }

    public void activaCajasVerificacion() {
        txtDuracion.setEnabled(true);
        txtLongitud.setEnabled(true);
        txtMaximoVisitantes.setEnabled(true);
        listaDisponiblesZonas.setEnabled(true);
        listaSeleccionadosZonas.setEnabled(true);
        cmbGuia.setEnabled(true);
        cbLunes.setEnabled(true);
        cbMartes.setEnabled(true);
        cbMiercoles.setEnabled(true);
        cbJu.setEnabled(true);
        cbViernes.setEnabled(true);
        cbSabado.setEnabled(true);
        cbDomingo.setEnabled(true);
        btnRegistrar.setEnabled(true);
        btnSeleccionar.setEnabled(true);
        btnEliminar.setEnabled(true);
    }

    public boolean verificaCamposLlenos() {
        String nombre = txtItinerarios.getText();
        String duracion = txtDuracion.getText();
        String longitud = txtLongitud.getText();
        Guia guiaaa = (Guia) cmbGuia.getSelectedItem();

        if (nombre.isEmpty() || guiaaa == null || duracion.isEmpty() || longitud.isEmpty() || seleccionadosListModelZonas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos requeridos");
            return false;
        } else {
            return true;
        }
    }

    public void mostrarEspacioTexto() {
        if (cbLunes.isSelected()) {
            txtLunes.setEnabled(true);
        } else {
            txtLunes.setEnabled(false);
            txtLunes.setText("");
        }
        if (cbMartes.isSelected()) {
            txtMartes.setEnabled(true);
        } else {
            txtMartes.setEnabled(false);
            txtMartes.setText("");
        }
        if (cbMiercoles.isSelected()) {
            txtMiercoles.setEnabled(true);
        } else {
            txtMiercoles.setEnabled(false);
            txtMiercoles.setText("");
        }
        if (cbJu.isSelected()) {
            txtJueves.setEnabled(true);
        } else {
            txtJueves.setEnabled(false);
            txtJueves.setText("");
        }
        if (cbViernes.isSelected()) {
            txtViernes.setEnabled(true);
        } else {
            txtViernes.setEnabled(false);
            txtViernes.setText("");
        }
        if (cbSabado.isSelected()) {
            txtSabado.setEnabled(true);
        } else {
            txtSabado.setEnabled(false);
            txtSabado.setText("");
        }
        if (cbDomingo.isSelected()) {
            txtDomingo.setEnabled(true);
        } else {
            txtDomingo.setEnabled(false);
            txtDomingo.setText("");
        }
    }

    public boolean validarRecorridos() {
        try {
            // Intenta analizar la cadena de texto como una hora en formato "HH:mm"
            if (cbLunes.isSelected()) {
                LocalTime.parse(txtLunes.getText());
            }
            if (cbMartes.isSelected()) {
                LocalTime.parse(txtMartes.getText());
            }

            if (cbMiercoles.isSelected()) {
                LocalTime.parse(txtMiercoles.getText());
            }

            if (cbJu.isSelected()) {
                LocalTime.parse(txtJueves.getText());
            }

            if (cbViernes.isSelected()) {
                LocalTime.parse(txtViernes.getText());
            }

            if (cbSabado.isSelected()) {
                LocalTime.parse(txtSabado.getText());
            }

            if (cbDomingo.isSelected()) {
                LocalTime.parse(txtDomingo.getText());
            }

            return true; // El formato es válido
        } catch (Exception e) {
            return false; // El formato es inválido
        }
    }

    public void registrarItinerario() {
        Itinerario itinerario = new Itinerario();
        itinerario.setNombre(txtItinerarios.getText());
        itinerario.setLongitud(Integer.parseInt(txtLongitud.getText()));
        itinerario.setMaximoVisitante(Integer.parseInt(txtMaximoVisitantes.getText()));
        itinerario.setDuracion(Integer.parseInt(txtDuracion.getText()));

        List<ZonaDelParque> seleccionados = new ArrayList<>();
        for (int j = 0; j < seleccionadosListModelZonas.size(); j++) {
            seleccionados.add(seleccionadosListModelZonas.get(j));
        }

        itinerario.setZonas(seleccionados);
        List<Recorrido> recorridosItinerario = new ArrayList<Recorrido>();
        if (cbLunes.isSelected()) {
            Horario horarioLunes = new Horario(Dias.Lunes, txtLunes.getText());
            Recorrido lunes = new Recorrido(horarioLunes, (Guia) cmbGuia.getSelectedItem());
            recorridosItinerario.add(lunes);
        }
        if (cbMartes.isSelected()) {
            Horario horarioMartes = new Horario(Dias.Martes, txtMartes.getText());
            Recorrido martes = new Recorrido(horarioMartes, (Guia) cmbGuia.getSelectedItem());
            recorridosItinerario.add(martes);
        }

        if (cbMiercoles.isSelected()) {
            Horario horarioMiercoles = new Horario(Dias.Miercoles, txtMiercoles.getText());
            Recorrido miercoles = new Recorrido(horarioMiercoles, (Guia) cmbGuia.getSelectedItem());
            recorridosItinerario.add(miercoles);
        }
        if (cbJu.isSelected()) {
            Horario horarioJueves = new Horario(Dias.Jueves, txtJueves.getText());
            Recorrido jueves = new Recorrido(horarioJueves, (Guia) cmbGuia.getSelectedItem());
            recorridosItinerario.add(jueves);
        }

        if (cbViernes.isSelected()) {
            Horario horarioViernes = new Horario(Dias.Viernes, txtViernes.getText());
            Recorrido viernes = new Recorrido(horarioViernes, (Guia) cmbGuia.getSelectedItem());
            recorridosItinerario.add(viernes);
        }

        if (cbSabado.isSelected()) {
            Horario horarioSabado = new Horario(Dias.Sabado, txtSabado.getText());
            Recorrido sabado = new Recorrido(horarioSabado, (Guia) cmbGuia.getSelectedItem());
            recorridosItinerario.add(sabado);
        }

        if (cbDomingo.isSelected()) {
            Horario horarioDomingo = new Horario(Dias.Domingo, txtDomingo.getText());
            Recorrido domingo = new Recorrido(horarioDomingo, (Guia) cmbGuia.getSelectedItem());
            recorridosItinerario.add(domingo);
        }
        itinerario.setRecorridos(recorridosItinerario);
        if (logica.guardaItinerario(itinerario)) {
            JOptionPane.showMessageDialog(this, "Registro Existoso!", "Exito", JOptionPane.INFORMATION_MESSAGE);
            FrmInicial i = new FrmInicial();
            i.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Hubo un error al registrar!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmItinerarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmItinerarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmItinerarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmItinerarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmItinerarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnSeleccionar;
    private javax.swing.JCheckBox cbDomingo;
    private javax.swing.JCheckBox cbJu;
    private javax.swing.JCheckBox cbLunes;
    private javax.swing.JCheckBox cbMartes;
    private javax.swing.JCheckBox cbMiercoles;
    private javax.swing.JCheckBox cbSabado;
    private javax.swing.JCheckBox cbViernes;
    private javax.swing.JComboBox<Guia> cmbGuia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<ZonaDelParque> listaDisponiblesZonas;
    private javax.swing.JList<ZonaDelParque> listaSeleccionadosZonas;
    private javax.swing.JTextField txtDomingo;
    private javax.swing.JTextField txtDuracion;
    private javax.swing.JTextField txtItinerarios;
    private javax.swing.JTextField txtJueves;
    private javax.swing.JTextField txtLongitud;
    private javax.swing.JTextField txtLunes;
    private javax.swing.JTextField txtMartes;
    private javax.swing.JTextField txtMaximoVisitantes;
    private javax.swing.JTextField txtMiercoles;
    private javax.swing.JTextField txtSabado;
    private javax.swing.JTextField txtViernes;
    // End of variables declaration//GEN-END:variables
}
